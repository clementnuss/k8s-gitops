---
apiVersion: v1
kind: Secret
metadata:
  name: apt-upgrade
  namespace: system-upgrade
type: Opaque
stringData:
  upgrade.sh: |
    #!/bin/sh
    apk add jq curl bash
    set -e
    # bash /host/run/system-upgrade/secrets/apt-upgrade/health-check.sh
    echo "sleeping 30 seconds"
    sleep 30 # make sure Longhorn has enough time to rebuild volumes

    echo "starting upgrade"
    chroot /host /bin/bash "/run/system-upgrade/secrets/apt-upgrade/apt-upgrade.sh"
  health-check.sh: |
    #!/bin/bash

    retry_count=6
    retry_interval=10

    for ((i=1; i<=retry_count; i++)); do
        echo "Attempt $i"
        output=$(curl -s http://longhorn-frontend.longhorn-system/v1/volumes)
        exit_status=$?

        # Check if curl command failed
        if [[ $exit_status -ne 0 ]]; then
            echo "Curl command failed with exit status $exit_status. Exiting..."
            exit $exit_status
        fi

        not_ready_volumes=$(echo "$output" | jq '[.data[] | select(.state == "attached" and .robustness != "healthy")] | length')
        if [[ $not_ready_volumes -gt 0 ]]; then
            if [[ $i -lt $retry_count ]]; then
                echo "There are $not_ready_volumes unhealthy volumes"
                echo "Retrying in $retry_interval seconds..."
                sleep $retry_interval
            else
                echo "All retries exhausted. Exiting..."
                exit 1
            fi
        else
            echo "All volumes are healthy, continuing."
            break
        fi
    done
  apt-upgrade.sh: |
    #!/bin/bash
    set -e
    apt-get update
    apt-get -y upgrade
    if [ -f /run/reboot-required ]; then
        echo "Reboot is required. Initiating reboot..."
        reboot
    else
        echo "No reboot needed."
        exit 0  # Exiting with return code 0
    fi
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: apt-upgrade
  namespace: system-upgrade
spec:
  concurrency: 1
  nodeSelector:
    matchExpressions:
       - {key: node-role.kubernetes.io/control-plane, operator: In, values: ["true"]}
       - {key: rke2-upgrade, operator: Exists}
  tolerations:
  - key: "CriticalAddonsOnly"
    operator: "Equal"
    value: "true"
    effect: "NoExecute"
  serviceAccountName: system-upgrade
  secrets:
    - name: apt-upgrade
      path: /host/run/system-upgrade/secrets/apt-upgrade
  drain:
    force: false
    skipWaitForDeleteTimeout: 300
  version: 2024-02
  upgrade:
    image: alpine:latest
    command: ["/bin/sh", "/host/run/system-upgrade/secrets/apt-upgrade/upgrade.sh"]
    # args: ["sh", "/run/system-upgrade/secrets/apt-upgrade/upgrade.sh"]